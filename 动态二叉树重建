//头文件！！

#pragma once
#include <iostream>

using namespace std;

typedef struct Node
{
	int data;
	Node* Rchild;
	Node* Lchild;
}NODE, *PNODE;

class Bi_FindTree
{
public:
	PNODE Get_tRoot()
	{
		return tRoot;
	}
	void Init()
	{
		tRoot->Lchild = NULL;
		tRoot->Rchild = NULL;
	}
	void Delete_Node(PNODE);
	void Set_Node(PNODE);
	void Traverse(PNODE);
	PNODE Find_Node(PNODE, int);
	int Depth_Tree(PNODE);

private:
	const PNODE tRoot = new NODE;//const需要初始化
};

//类函数
#include <iostream>
#include "test.h"

using namespace std;

void Bi_FindTree::Set_Node(PNODE newChild)
{
	newChild->Lchild = newChild->Rchild = NULL;//必不可少S

	PNODE temp = tRoot;
	while (temp)
	{
		if (newChild->data>temp->data)
		{
			if (temp->Rchild==NULL)
			{
				temp->Rchild = newChild;
				break;
			}
			else
			{
				temp = temp->Rchild;
			}
		}
		else if (temp->data>newChild->data)
		{
			if (temp->Lchild == NULL)
			{
				temp->Lchild = newChild;
				break;
			}
			else
				temp = temp->Lchild;
		}
		else
		{
			break;
		}
	}
}

PNODE Right_Min(PNODE tRoot)
{
	PNODE tempRoot = tRoot;
	PNODE temp = tempRoot->Rchild;

	if (tempRoot->Rchild==NULL)
		return tempRoot;
	else
		Right_Min(temp->Lchild);
}

PNODE Left_Max(PNODE tRoot)
{
	PNODE tempRoot = tRoot;
	PNODE temp = tempRoot->Lchild;

	if (tempRoot->Lchild == NULL)
		return tempRoot;
	else
		Right_Min(temp->Rchild);
}

PNODE Find_Parent(PNODE tRoot, int value)
{
	PNODE temp = tRoot;

	if (temp->Lchild->data == value || temp->Rchild->data == value)
		return temp;
	else if (temp->data > value)
		Find_Parent(temp->Lchild, value);
	else if (temp->data < value)
		Find_Parent(temp->Rchild, value);
}

void Bi_FindTree::Delete_Node(PNODE tRoot)
{
	if (tRoot == NULL)
		return;
	if (tRoot->Rchild!=NULL && tRoot->Lchild==NULL)
	{
		tRoot->data = tRoot->Rchild->data;
		delete tRoot->Rchild;
		tRoot->Rchild = NULL;
	}
	else if (tRoot->Rchild==NULL && tRoot->Lchild!=NULL)
	{
		tRoot->data = tRoot->Lchild->data;
		delete tRoot->Lchild;
		tRoot->Lchild = NULL;
	}
	else if (tRoot->Rchild == NULL && tRoot->Lchild == NULL)
	{
		delete tRoot;
		tRoot = NULL;
	}
	else
	{
		PNODE temp = tRoot;
		PNODE rightMin = Right_Min(tRoot);
		temp->data = rightMin->data;
		PNODE tempParent = Find_Parent(tRoot, rightMin->data);
		delete rightMin;
		tempParent->Rchild == NULL;
	}
	cout << "删除成功！" << endl;
}

int Bi_FindTree::Depth_Tree(PNODE tRoot)
{
	int m, n;

	if (tRoot==NULL)
	{
		return 0;
	}
	else
	{
		m = Depth_Tree(tRoot->Lchild);
		n = Depth_Tree(tRoot->Rchild);

		return m > n ? (m + 1) : (n + 1);
	}
}

void ProOrder_Traverse(PNODE tRoot)
{
	if (tRoot!=NULL)
	{
		cout << tRoot->data << " ";
		ProOrder_Traverse(tRoot->Lchild);
		ProOrder_Traverse(tRoot->Rchild);
	}
}

void InOrder_Traverse(PNODE tRoot)
{
	if (tRoot!=NULL)
	{
		InOrder_Traverse(tRoot->Lchild);
		cout << tRoot->data << " ";
		InOrder_Traverse(tRoot->Rchild);
	}
}

void PostOrder_Traverse(PNODE tRoot)
{
	if (tRoot!=NULL)
	{
		PostOrder_Traverse(tRoot->Lchild);
		PostOrder_Traverse(tRoot->Rchild);
		cout << tRoot->data << " ";
	}
}

void Bi_FindTree::Traverse(PNODE tRoot)
{
	cout << "先序遍历：";
	ProOrder_Traverse(tRoot);
	cout << endl << "中序遍历：";
	InOrder_Traverse(tRoot);
	cout << endl << "后序遍历：";
	PostOrder_Traverse(tRoot);
	cout << endl;
}

//主程序
#include <iostream>
#include "test.h"

using namespace std;

PNODE Left_Max(PNODE);
PNODE Right_Min(PNODE);

int main()
{
	Bi_FindTree bitree;
	PNODE tRoot = bitree.Get_tRoot();
	bitree.Init();

	cout << "请问你还想设置几个节点：";
	int n;
	cin >> n;

	int i = 0;
	while (n--)
	{
		i++;
		PNODE newChild = new NODE;
		cout << "你想设置的第" << i << "个树节点的数据是：";
		cin >> newChild->data;

		bitree.Set_Node(newChild);
	}

	int depth = bitree.Depth_Tree(tRoot);
	cout << "树的深度为：" << depth << endl;
	bitree.Traverse(tRoot);

	cout << "请输入你想查找的数：";
	int m;
	cin >> m;
	PNODE finded = bitree.Find_Node(tRoot, m);
	cout << "该节点的数据为：" << finded->data << endl;
	cout << "该节点的地址为：" << finded << endl;

	int f;
	cout << "请问你要删除的数据是：";
	cin >> f;
	bitree.Delete_Node(bitree.Find_Node(tRoot, f));
	bitree.Traverse(tRoot);

	PNODE Lmax = Left_Max(tRoot);
	PNODE Rmin = Right_Min(tRoot);
	if (Lmax->data == tRoot->data)
	{
		cout << "左子树最大数(根节点)：" << Lmax->data << endl;
		cout << "右子树最小数地址：" << Rmin << " 数据为：" << Rmin->data << endl;
	}
	else if (Rmin->data == tRoot->data)
	{
		cout << "右子树最小数(根节点)：" << Rmin->data << endl;
		cout << "左子树最大数地址：" << Lmax << " 数据为：" << Lmax->data << endl;
	}
	else
	{
		cout << "左子树最大数地址：" << Lmax << " 数据为：" << Lmax->data << endl;
		cout << "右子树最小数地址：" << Rmin << " 数据为：" << Rmin->data << endl;
	}

	return 0;
}
