#include <iostream>
#include "test.h"

using namespace std;

void Bi_FindTree::Set_Node(PNODE newChild, int n)
{
	newChild->Lchild = newChild->Rchild = NULL;//每一颗树节点左右孩子置空！！

	PNODE tempRoot = tRoot;//指向当前节点
	while (tempRoot!=NULL)
	{
		//待插入值大于当前树根值
		if (newChild->data > tempRoot->data)
		{
			//当前节点右孩子为空，直接插入
			if (tempRoot->Rchild==NULL)
			{
				tempRoot->Rchild = newChild;					
				break;
			}//当前右孩子不为空，令当前节点移到该右孩子
			else
			{
				tempRoot = tempRoot->Rchild;
			}
		}//待插入值小于当前树根值
		else if (newChild->data < tempRoot->data)
		{
			//当前节点左孩子为空，直接插入
			if (tempRoot->Lchild==NULL)
			{
				tempRoot->Lchild = newChild;
				break;
			}//当前节点左孩子不为空，令当前节点移到该左孩子
			else
			{
				tempRoot = tempRoot->Lchild;
			}
		}//待插入值等于当前节点值，不作处理
		else
		{
			break;
		}
	}
}

PNODE Right_Min(PNODE tRoot)
{
	PNODE tempRoot = tRoot;
	if (tempRoot->Lchild==NULL)
	{
		return tempRoot;
	}
	else
	{
		Right_Min(tempRoot->Lchild);
	}
}

PNODE Left_Max(PNODE tRoot)
{
	PNODE tempRoot = tRoot;
	if (tempRoot->Rchild == NULL)
	{
		return tempRoot;
	}
	else
	{
		Left_Max(tempRoot->Rchild);
	}
}

PNODE Find_Parent(PNODE tRoot, int value)
{
	PNODE tempRoot = tRoot;

	if (tempRoot->Rchild->data == value || tempRoot->Lchild->data == value)
	{
		return tempRoot;
	}
	else if (tempRoot->data>value)
	{
		Find_Parent(tempRoot->Lchild, value);
	}
	else if (tempRoot->data<value)
	{
		Find_Parent(tempRoot->Rchild, value);
	}
}

//重点：找父节点
void Bi_FindTree::Delete_Node(PNODE tRoot)
{
	if (tRoot==NULL)
	{
		return;
	}
	if (tRoot->Rchild==NULL && tRoot->Lchild!=NULL)//只有左孩子
	{
		tRoot->data = tRoot->Lchild->data;
		delete tRoot->Lchild;
		tRoot->Lchild = NULL;
	}
	else if (tRoot->Rchild != NULL && tRoot->Lchild == NULL)//只有右孩子
	{
		tRoot->data = tRoot->Rchild->data;
		delete tRoot->Rchild;
		tRoot->Rchild = NULL;
	}
	else if (tRoot->Rchild == NULL && tRoot->Lchild == NULL)//无孩子
	{
		delete tRoot;
		tRoot = NULL;
	}
	else//左右孩子都有
	{
		PNODE temp = tRoot;
		PNODE rightMin = Right_Min(tRoot);//或者选择左子树最大节点
		temp->data = rightMin->data;
		PNODE tempParent = Find_Parent(tRoot, rightMin->data);
		delete rightMin;
		tempParent->Lchild = NULL;//将删除的位置置空，如果不置空将会是随机值
	}
}

PNODE Bi_FindTree::Find(PNODE tRoot, int value)
{
	PNODE tempRoot = tRoot;

	if (tempRoot->data==value)
	{
		return tempRoot;
	}
	else if (tempRoot->data > value)
	{
		Find(tempRoot->Lchild, value);
	}
	else
	{
		Find(tempRoot->Rchild, value);
	}
}

int Bi_FindTree::Depth_Tree(PNODE tRoot)
{
	int m, n;

	if (tRoot==NULL)
	{
		return 0;
	}
	else
	{
		m = Depth_Tree(tRoot->Lchild);
		n = Depth_Tree(tRoot->Rchild);

		if (m>n)
		{
			return m + 1;
		}
		else
		{
			return n + 1;
		}
	}

}

void Pro_Order_Traverse(PNODE tRoot)
{
	if (tRoot!=NULL)
	{
		cout << tRoot->data << " ";
		Pro_Order_Traverse(tRoot->Lchild);
		Pro_Order_Traverse(tRoot->Rchild);
	}
}

void In_Order_Traverse(PNODE tRoot)
{
	if (tRoot!=NULL)
	{
		In_Order_Traverse(tRoot->Lchild);
		cout << tRoot->data << " ";
		In_Order_Traverse(tRoot->Rchild);
	}
}

void Post_Order_Traverse(PNODE tRoot)
{
	if (tRoot!=NULL)
	{
		Post_Order_Traverse(tRoot->Lchild);
		Post_Order_Traverse(tRoot->Rchild);
		cout << tRoot->data << " ";
	}
}

void Bi_FindTree::Traverse(PNODE tRoot)
{
	cout << "先序遍历：";
	Pro_Order_Traverse(tRoot);
	cout << endl << "中序遍历：";
	In_Order_Traverse(tRoot);
	cout << endl << "后序遍历：";
	Post_Order_Traverse(tRoot);
	cout << endl;
}

int main()
{
	Bi_FindTree bitree;
	PNODE BitRoot = bitree.Get_TreeRoot();
	bitree.Init();

	cout << "请问你还想设置几个节点：";
	int n;
	cin >> n;

	int i = 0;
	while (n--)
	{
		i++;
		PNODE newChild = new NODE;
		cout << "你想设置的第" << i << "个树节点的数据是：";
		cin >> newChild->data;

		bitree.Set_Node(newChild, n);
	}

	int depth = bitree.Depth_Tree(BitRoot);
	cout << "树的深度为：" << depth << endl;
	bitree.Traverse(BitRoot);

	cout << "请输入你想查找的数：";
	int m;
	cin >> m;
	PNODE finded = bitree.Find(BitRoot, m);
	cout << "该节点的数据为：" << finded->data << endl;
	cout << "该节点的地址为：" << finded << endl;

	int f;
	cout << "请问你要删除的数据是：";
	cin >> f;
	bitree.Delete_Node(bitree.Find(BitRoot, f));
	bitree.Traverse(BitRoot);

	PNODE Lmax = Left_Max(BitRoot);
	PNODE Rmin = Right_Min(BitRoot);
	if (Lmax->data == BitRoot->data)
	{
		cout << "左子树最大数(根节点)：" << Lmax->data << endl;
		cout << "右子树最小数地址：" << Rmin << " 数据为：" << Rmin->data << endl;
	}
	else if (Rmin->data == BitRoot->data)
	{
		cout << "右子树最小数(根节点)：" << Rmin->data << endl;
		cout << "左子树最大数地址：" << Lmax << " 数据为：" << Lmax->data << endl;
	}
	else
	{
		cout << "左子树最大数地址：" << Lmax << " 数据为：" << Lmax->data << endl;
		cout << "右子树最小数地址：" << Rmin << " 数据为：" << Rmin->data << endl;
	}

	return 0;
}
